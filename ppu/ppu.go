package ppu

const (
	width  = 256
	height = 240
)

var palette = [...]*color{
	{0x80, 0x80, 0x80}, {0x00, 0x3D, 0xA6}, {0x00, 0x12, 0xB0}, {0x44, 0x00, 0x96},
	{0xA1, 0x00, 0x5E}, {0xC7, 0x00, 0x28}, {0xBA, 0x06, 0x00}, {0x8C, 0x17, 0x00},
	{0x5C, 0x2F, 0x00}, {0x10, 0x45, 0x00}, {0x05, 0x4A, 0x00}, {0x00, 0x47, 0x2E},
	{0x00, 0x41, 0x66}, {0x00, 0x00, 0x00}, {0x05, 0x05, 0x05}, {0x05, 0x05, 0x05},
	{0xC7, 0xC7, 0xC7}, {0x00, 0x77, 0xFF}, {0x21, 0x55, 0xFF}, {0x82, 0x37, 0xFA},
	{0xEB, 0x2F, 0xB5}, {0xFF, 0x29, 0x50}, {0xFF, 0x22, 0x00}, {0xD6, 0x32, 0x00},
	{0xC4, 0x62, 0x00}, {0x35, 0x80, 0x00}, {0x05, 0x8F, 0x00}, {0x00, 0x8A, 0x55},
	{0x00, 0x99, 0xCC}, {0x21, 0x21, 0x21}, {0x09, 0x09, 0x09}, {0x09, 0x09, 0x09},
	{0xFF, 0xFF, 0xFF}, {0x0F, 0xD7, 0xFF}, {0x69, 0xA2, 0xFF}, {0xD4, 0x80, 0xFF},
	{0xFF, 0x45, 0xF3}, {0xFF, 0x61, 0x8B}, {0xFF, 0x88, 0x33}, {0xFF, 0x9C, 0x12},
	{0xFA, 0xBC, 0x20}, {0x9F, 0xE3, 0x0E}, {0x2B, 0xF0, 0x35}, {0x0C, 0xF0, 0xA4},
	{0x05, 0xFB, 0xFF}, {0x5E, 0x5E, 0x5E}, {0x0D, 0x0D, 0x0D}, {0x0D, 0x0D, 0x0D},
	{0xFF, 0xFF, 0xFF}, {0xA6, 0xFC, 0xFF}, {0xB3, 0xEC, 0xFF}, {0xDA, 0xAB, 0xEB},
	{0xFF, 0xA8, 0xF9}, {0xFF, 0xAB, 0xB3}, {0xFF, 0xD2, 0xB0}, {0xFF, 0xEF, 0xA6},
	{0xFF, 0xF7, 0x9C}, {0xD7, 0xE8, 0x95}, {0xA6, 0xED, 0xAF}, {0xA2, 0xF2, 0xDA},
	{0x99, 0xFF, 0xFC}, {0xDD, 0xDD, 0xDD}, {0x11, 0x11, 0x11}, {0x11, 0x11, 0x11},
}

type color [3]uint8
type background [height][width]*color
type sprite [8][8]uint8

type PPU struct {
	bus        *PPUBus
	cycle      uint
	line       uint
	addr       uint16
	background *background
}

type Tile struct {
	Sprite    *sprite
	PaletteId uint8
}

func New(ppuBus *PPUBus) *PPU {
	return &PPU{bus: ppuBus}
}

func (p *PPU) WritePPUAddr(data uint8) {
	p.addr = p.addr<<4 + uint16(data)
}

func (p *PPU) ReadPPUData() uint8 {
	return p.bus.Read(p.addr)
}

func (p *PPU) WritePPUData(data uint8) {
	p.bus.Write(p.addr, data)
}

func (p *PPU) readByte(addr uint16) uint8 {
	return p.bus.Read(addr)
}

func (p *PPU) getAttribute(x uint, y uint) uint8 {
	addr := 0x23C0 + uint16(x/32+(y/32)*0x0F)
	return p.readByte(addr)
}

func (p *PPU) getSprite(x uint, y uint) *sprite {
	baseAddr := 0x2000 + uint16((x/8)+(y/8)*0x2F)
	var s sprite
	for i := uint16(0); i < 16; i++ {
		d := p.readByte(baseAddr + i)
		for j := 0; j < 8; j++ {
			s[i%8][j] += ((d >> (7 - j)) & 0b01) << (i / 8)
		}
	}
	return &s
}

func (p *PPU) calcColor(x uint, y uint) *color {
	attr := p.getAttribute(x, y)
	sprite := p.getSprite(x, y)
	index := (attr >> sprite[y%8][x%8]) & 0b11
	return palette[index]
}

func (p *PPU) incrementLine() {
	p.line++
}

func (p *PPU) Run(cycle uint) *background {
	p.cycle += cycle
	defer p.incrementLine()

	if p.cycle < 341 {
		return nil
	}

	p.cycle -= 341

	for i := uint(0); i < width; i++ {
		p.background[p.line][i] = p.calcColor(i, p.line)
	}

	if p.line < 262 {
		return nil
	}

	p.line = 0
	return p.background
}
